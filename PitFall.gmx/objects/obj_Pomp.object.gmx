<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Pomp_Idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player Controller and Animation Variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 11;
movespeed = 4;

isAirbourne = false;

// animation variables
image_speed = 0.3; // designed for 24 FPS, room is 60 FPS  24/60 = .4, but we wanted a little slower
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Health and Victory Condition
health = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Health Step and Objective Step

// Collision with enemy
if (place_meeting(x,y,obj_EnemyBase))
{
    if (health &gt; 0)
    {
        health = health -1;
    }
    
    // Handle death
    if (health == 0)
    {
        room_goto(m_TestLevel);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Controller Step
//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;
 
// Jump when "on" the ground (technically, when 1 pixel below is ground)
if (place_meeting(x,y+1,obj_SolidBase))
{
    vsp = key_jump * -jumpspeed;
    isAirbourne = false;
}
else
{
    isAirbourne = true;
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_SolidBase))
{
    while(!place_meeting(x+sign(hsp),y,obj_SolidBase))
    {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_SolidBase))
{
    while(!place_meeting(x,y+sign(vsp),obj_SolidBase))
    {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Sprite

desiredSprite = spr_Pomp_Idle;

// fall
if (vsp &lt; 0)
{
    desiredSprite = spr_Pomp_Jump;
}
// jump
else if (vsp &gt; 0)
{
    desiredSprite = spr_Pomp_Fall;
}
else if (isAirbourne)
{
    // do nothing if is at the apex of his jump
    desiredSprite = spr_Pomp_Fall;
}
// running right
else if (hsp &gt; 0)
{
    desiredSprite = spr_Pomp_Running;
}
// running left
else if (hsp &lt; 0)
{
    desiredSprite = spr_Pomp_Running;
}
else
{
    desiredSprite = spr_Pomp_Idle;
}
    
if (sprite_index != desiredSprite)
{
    sprite_index = desiredSprite;
}


// image flipping, Doing this here rather than above so that easily cover the case of changing direction while in the air
//  going right
if (hsp &gt; 0)
{
    image_xscale = 1;
}
// going left
else if (hsp &lt; 0)
{
    // Flip sprite horizontally
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Character Stats
//draw_self()
//draw_background_stretched_ext(bg_HUD,33, 5, 268, 25, c_white, 0.5);
//draw_rectangle(32, 5, 300, 30, true);
//draw_set_font(fnt_default);
//draw_text(x,y-20, "*****");//"H: " + health + "%");
healthFormatted = string_format(health, 3, 0);
draw_text(35,0, "Health: " + healthFormatted);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
